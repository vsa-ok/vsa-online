'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["children", "render"];

function usePrevious(value) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = value;
  });
  return ref.current;
}

function useTabs(tabs, defaultTab) {
  var state = React.useState();
  var selectedTab = state[0],
      setSelectedTab = state[1];
  var activeIndex = React.useMemo(function () {
    if (selectedTab) {
      return tabs.indexOf(selectedTab);
    }

    return -1;
  }, [selectedTab, tabs]);
  var previousActiveIndex = usePrevious(activeIndex);
  React.useEffect(function () {
    if (tabs.length === 0) {
      setSelectedTab(undefined);
      return;
    }

    if (selectedTab === null || selectedTab && tabs.includes(selectedTab)) {
      return;
    }

    if (typeof previousActiveIndex === 'number' && previousActiveIndex >= 0 && (tabs[previousActiveIndex] || tabs[previousActiveIndex - 1])) {
      setSelectedTab(tabs[previousActiveIndex] || tabs[previousActiveIndex - 1]);
      return;
    }

    if (defaultTab === null) {
      return;
    }

    setSelectedTab(defaultTab && tabs.includes(defaultTab) ? defaultTab : tabs[0]);
  }, [selectedTab, defaultTab, tabs]);
  return state;
}
function TabPanel(_ref) {
  var children = _ref.children,
      _ref$render = _ref.render,
      render = _ref$render === void 0 ? 'lazy' : _ref$render,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _React$useState = React.useState(render === 'always'),
      shouldRender = _React$useState[0],
      setShouldRender = _React$useState[1];

  React.useEffect(function () {
    if (props.hidden) {
      return;
    }

    setShouldRender(true);
  }, [props.hidden]);
  return React.createElement("div", Object.assign({}, props), shouldRender ? children : null);
}

exports.TabPanel = TabPanel;
exports.useTabs = useTabs;
//# sourceMappingURL=react-headless-tabs.cjs.development.js.map
